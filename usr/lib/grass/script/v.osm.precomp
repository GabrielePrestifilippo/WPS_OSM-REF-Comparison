#!/usr/bin/python2.7
#  -*- coding:utf-8 -*-
############################################################################ # 
# MODULE:
# AUTHOR(S): 
# PURPOSE: tool for the comparison of two road datasets
# COPYRIGHT: (C) 2012 by the GRASS Development Team 
# 
# This program is free software under the GNU General Public 
# License (>=v2). Read the file COPYING that comes with GRASS 
# for details. 
# ############################################################################
#%Module
#%  description: Tool for the preliminary comparison between OSM and reference datasets
#%  keywords: vector, OSM, comparison
#%End

#%option 
#% key: osm
#% type: string 
#% description: OpenStreetMap dataset
#% required: yes 
#%end

#%option 
#% key: ref
#% type: string 
#% description: Reference dataset
#% required: yes
#%end

#%option 
#% key: roi
#% type: string 
#% description: Clipping mask
#% required: no 
#%end

#%option 
#% key: buffer
#% type: double 
#% description: Buffer around reference and OpenStreetMap dataset (map units)
#% required: no
#% answer: 15
#%end



#%option G_OPT_F_OUTPUT
#% description: Name for output file (if omitted or "-" output to stdout)
#% required: no
#%end

import re
import os
import sys
import time


def length(data):
    length_data = grass.read_command("v.to.db",map=data,option="length",flags="p")
    s_data=0   
    l_data = length_data.split("\n")
    for item in l_data[1:-1]:
        s_data+=float(item.split("|")[1])      
    return s_data

def main():
	
     
    os.environ['HOME'] = "/home/user/"
	


    InputOSM =  options["osm"]
    InputREF =  options["ref"]
    InputROI = options["roi"]

    buff = options["buffer"]
    
    out = options["output"]

    grass.run_command('g.mapset', mapset='PERMANENT', location='tmp', flags='c')



    ref=grass.run_command('v.in.ogr', input=InputREF,  output="ref", overwrite=True, flags = 'o' )
    ref="ref@PERMANENT1"

    osm=grass.run_command('v.in.ogr', input=InputOSM,  output="osm", overwrite=True,  flags = 'o' )
    osm="osm@PERMANENT1"

    roi = None
    if len(InputROI)>0:
    	roi=grass.run_command('v.in.ogr', input=InputROI,  output="roi", overwrite=True,  flags = 'o' )
    	roi="roi@PERMANENT1"


     # prepare temporary map raster names
    processid = str(time.time()).replace(".","_")    
    ref_roi="ref_roi_"+processid
    osm_roi="osm_roi_"+processid
    ref_buffer="ref_buffer_"+processid
    osm_buffer= "osm_buffer_"+processid
    ref_in= "ref_in_"+processid
    ref_out= "ref_out_"+processid 
    osm_in= "osm_in_"+processid
    osm_out= "osm_out_"+processid    
    

    
    ### Import and apply mask ###
    if roi and len(roi)>0:
        grass.run_command("v.overlay",ainput=ref, atype="line", binput=roi, operator="and", output=ref_roi,flags="t",quiet=True)
        grass.run_command("v.overlay",ainput=osm, atype="line", binput=roi, operator="and", output=osm_roi,flags="t",quiet=True)
        ref = ref_roi
        osm = osm_roi


        
    ### Calculate length datasets ###
    s_ref = length(ref)
    s_osm = length(osm)
    
    if s_ref == 0:
        print "No reference data for comparison"
        grass.run_command("g.mremove", vect="%s"%processid,flags="fr",quiet=True)
        sys.exit()
    if s_osm == 0:
        grass.run_command("g.mremove", vect="%s"%processid,flags="fr",quiet=True)
        print "No OSM data for comparison"
        sys.exit()
        
    
    diff = s_ref - s_osm 
    diff_p = diff/s_ref*100
        

   
    
    ### Calculate REF data in and out OSM buffer ###   

    grass.run_command("v.buffer",input=osm, output=osm_buffer, distance=buff, type="line",overwrite=True,quiet=True)
    grass.run_command("v.overlay",ainput=ref,binput=osm_buffer,operator="and", output=ref_in, atype="line",flags="t",overwrite=True,quiet=True)
    grass.run_command("v.overlay",ainput=ref,binput=osm_buffer,operator="not", output=ref_out,atype="line",flags="t",overwrite=True,quiet=True)
    s_ref_in = length(ref_in)
    var_ref_in = s_ref_in/s_ref*100
    s_ref_out = length(ref_out)
    var_ref_out = s_ref_out/s_ref*100
   
   
    ### Calculate OSM data in and out REF buffer ###
        
    grass.run_command("v.buffer",input=ref,output=ref_buffer,distance=buff,type="line",overwrite=True,quiet=True)
    grass.run_command("v.overlay",ainput=osm,binput=ref_buffer,operator="and", output=osm_in, atype="line",flags="t",overwrite=True,quiet=True)
    grass.run_command("v.overlay",ainput=osm,binput=ref_buffer,operator="not",output=osm_out,atype="line",flags="t",overwrite=True,quiet=True) 
    s_osm_in = length(osm_in)
    var_osm_in = s_osm_in/s_osm*100
    s_osm_out = length(osm_out)  
    var_osm_out = s_osm_out/s_osm*100

    ### Remove temporary data ###
    grass.run_command("g.remove", type="vect", pattern="%s"%processid,flags="fr",quiet=True)
    
    ### Print statistics ###
    
    if len(out)>0:
        fil = open(out,"w")
        fil.write("Length of reference data: %s m\n"%(round(s_ref,1)))       
        fil.write("Length of OSM data: %s m\n"%(round(s_osm,1)))       
        fil.write("Difference between datasets: %s m (%s%%)\n"%((round(diff,1)),(round(diff_p,1))))
        fil.write("Length of reference data (in buffer): %s m (%s%%)\n"%((round(s_ref_in,1)),(round(var_ref_in,1))))
        fil.write("Length of reference data (out buffer): %s m (%s%%)\n"%((round(s_ref_out,1)),(round(var_ref_out,1))))
        fil.write("Length of OSM data (in buffer): %s m (%s%%)\n"%((round(s_osm_in,1)),(round(var_osm_in,1))))
        fil.write("Length of OSM data (out buffer): %s m (%s%%)\n"%((round(s_osm_out,1)),(round(var_osm_out,1))))
        fil.close()
    
    print "##################################################\n" 
    print "Length of reference data: %s m \n"%(round(s_ref,1))
    print "Length of OSM data: %s m\n"%(round(s_osm,1))
    print "Difference between datasets: %s m (%s%%)\n"%((round(diff,1)),(round(diff_p,1)))
    print "Length of reference data (in buffer): %s m (%s%%)\n"%((round(s_ref_in,1)),(round(var_ref_in,1)))
    print "Length of reference data (out buffer): %s m (%s%%)\n"%((round(s_ref_out,1)),(round(var_ref_out,1)))
    print "Length of OSM data (in buffer): %s m (%s%%)\n"%((round(s_osm_in,1)),(round(var_osm_in,1)))
    print "Length of OSM data (out buffer): %s m (%s%%)\n"%((round(s_osm_out,1)),(round(var_osm_out,1)))
    print "##################################################\n"



if __name__ == "__main__":
    sys.path.append("/usr/lib/grass70/etc/python/")
    import grass.script as grass	
    options, flags = grass.parser()
    main()

